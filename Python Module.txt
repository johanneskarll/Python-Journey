Module dari python ------------
    import datetime as dt (waktu)
        now = dt.datetime.now (.year,.strftime('%A'))
        year = now.year 
            karena disini now sudah berupa objek, kita bisa mengakses attributnya yaitu year untuk mendapatkan tahun ini
            attribut lain yang dapat kita gunakan selain year: month, weekday, hour, minute, dsb.
        
        contohspecificdate = dt.datetime(year= , month= , day= )
            ini untuk membuat datetime sesuai yang kita inginkan.
    
    import time (berbeda dengan datetime)
        module time mensupport waktu lokal, sementara datetime hanya mensupport UTC.
        selain itu time juga memungkinkan kita menghitung berapa lama suatu program/fungsi dieksekusi, sementara datetime hanya untuk dates(hari) dan times(jam/menit/detik)
        contoh penggunaan untuk menghitung suatu fungsi
            starttime = time.time()
            #ini programnnya
            endtime = time.time()
            executiontime = endtime - starttime

        time.sleep(5)
            berguna untuk mempause atau menghentikan suatu program untuk beberapa waktu, 5 disini berarti 5 detik.


    import os 
        os.system("cls") atau os.system("clear")

    import string
        string.ascii

    import random
        random.choice
        random.randint(a,n) -> ini buat ng

    from collections import Counter
        Counter(data)

    import csv (python merupakan programming language yang support dalam pengolahan data yang besar)
        with open__ as namaopenfile:
            variabel = csv.reader(namaopenfile)
            for row in variable: print(row) -> ini akan mengeluarkan setiap row dan kata-perkata dipisah

    import smtplib (Email SMTP)
        modul yang memungkinkan kita mengirim email menggunakan python
        smtplib.SMTP("smtp.gmail.com", 587)

Module dari luar -------------
    import numpy (array)
        bisa langsung pangkat, tidak seperti list
            vector = np.array[1,2,3,4]
            print(vector**2)
        selain itu kalo pas print kita *2
            di list -> print 2 kali [1,2,3,4,1,2,3,4]
            di array -> print value x 2 [2 4 6 8]
    import requests (API dari luar)
        response = requests.get(url="https://blablablabla.com/api.php") -> selain api juga bisa.
        print(response)
            ini akan mengeluarkan response codenya, jika 2XX maka berhasil meminta ke API selain itu berarti error entah dari kita atau dari mengeluarkan
        data = response.json()
            ini akan mengeluarkan hasil dari API yang kita minta biasanya datanya berupa json dan berupa dictionary
        
        request.post() -> memberikan data ke external service
        request.put() -> update
        request.delete() -> delete
    
        untuk website/selain api
        data = response.text
            ini akan mengeluarkan file textnya 
            
    import bs4 (Beautiful Soup) -> perlu requests
        bs digunakan untuk web scraping atau mengikis/mengambil informasi dari web pages (html atau xml) 
        Module :
            BeautifulSoup
                soup = BeautifulSoup(text, 'html.parser' atau 'lxml') -> text disini adalah python open file.read yang disimpan ke variabel bernama text. jika menggunakan lxml harus import lxml.
                objek soup sekarang sudah mewakili html sehingga jika kita print(soup) outputnya adalah text html itu sendiri, bahkan jika kita menggunakan atribut seperti ini
                
                soup.prettify()
                    ini akan memberikan indentasi pada text html kita.
                
                soup.title / soup.title.string
                    untuk melihat title dari html page. 
                
                soup.a / soup.p / soup.li
                    untuk mendapatkan a(anchor) atau p(paragraf) atau li(list) pertama dalam file html
                
                soup.find_all("elemennya")
                    berbeda dengan soup.a/soup.h3 dan lainnya yang hanya mengeluarkan elemen pertamanya saja
                    find_all akan mengeluarkan semua elemennya dalam bentuk list.
                    
                    jika kita hanya menginginkan isinya saja, kita bisa membuatnya seperti ini
                    all_anchor_tags = soup.find_all(name="a")
                    for tag in all_anchor_tags:
                        pirnt(tag.getText())
                    
                    sementara jika kita hanya ingin linknya saja
                    for tag in all_anchor_tags:
                        print(tag.get("href"))
                
                soup.find(name="elemen", id="namaidnya" atau class_="namaclassnya")
                    digunakan untuk mencari tag yang spesifik.

                soup.select / soup.select_one(selector="p a")
                    mirip find diatas namun perbedaannya find menggunakan elemen + id/class sebagai pembeda, sementara
                    select seperti css selector disini mengambil elemen yang berada didalam elemen lainnya
                    contoh jika menggunakan find dan select:
                        sf = soup.find('h1', id='name') -> tipenya = <class 'bs4.element.Tag'>
                        sso = soup.select_one('h1, #name') -> tipenya = <class 'bs4.element.Tag'>
                        ss = soup.select('h1, #name') -> tipenya = <class 'bs4.element.ResultSet'>
                    soup.select akan mereturn dalam bentuk list.
                    
                    Penggunaan select/find tergantung posisi informasi yang ingin kita ambil apakah memerlukan penggunaan css selector, jika tidak
                    kita cukup menggunakan find saja.

                    contoh diatas p a artinya elemen a (anchor) yang berada didalam p(paragraf)
                    jika kita ingin idnya maka gunakan #namaidnya, kemudian kalau class gunakan .namaclassnya
    
    import selenium -> ga perlu requests
        selenium digunakan untuk otomatisasi interaksi web browser dengan python.
        perbedaanya dengan beautifulsoup akan menyulitkan jika website tersebut di render menggunakan js/react/angular dan akan memakan waktu yang lama
        meskipun BS lebih cepat untuk beberapa bahasa pemrograman.
        Module :
            webdriver (from selenium import webdriver)
                tiap browser memiliki constructor yang berbeda ketiak dipanggil 
                untuk Chrome => driver = webdriver.Chrome()

                Options (from selenium.webdriver.chrome.options import Options)
                untuk menjaga browser tetap terbuka setelah program selesai sebagai berikut
                untuk Chrome => chrome_opt = Options()
                                chrome_opt.add_experimental_option("detach", True)
                                notes: setting "detach" parameter menjadi true akan menjaga browser tetap terbuka bahkan setelah prosesnya telah selesai, selama quitnya ga disend ke driver.
                
                Mengakses website yang kita mau tanpa perlu menggunakan request  
                driver.get("https://www.linknya.com")
                
                Membuka tab baru / window baru (Terdapat banyak cara untuk membuka dan berpindah tab salah satunya dibawah ini)
                driver.switch_to.new_window('tab') # ini untuk tab
                driver.switch_to.new_window('window') 

                Berpindah tab
                driver.switch_to.window(driver.window_handles[0])
                angka 0 berarti tab pertama, 1 berarti tab kedua dst.              

                untuk menentukan seberapa besar window yang terbuka, mengingat pada website sekarang ini flexible dan bisa jadi komponennya berubah dan tidak menentu tergantung tab sizenya
                driver.set_window_size(1080,800)

                untuk menutup tab setelah program selesai terdapat dua cara
                driver.close() -> close the active tab particular page
                driver.quit() -> quit the entire browser/program

                selanjutnya akan membahas mengenai atribut dan apa saja yang dapat digunakan
                By (from selenium.webdriver.common.by import By)
                variabel = driver.find_element(By.contoh, value = "ini valuenya")
                    'contoh' diatas dapat diganti sebagai berikut
                    untuk mencari class -> By.CLASS_NAME
                    untuk mencari nama -> By.NAME
                    untuk mencari ID -> By.ID
                    untuk mencari sesuatu yang spesifik -> By.CSS_SELECTOR , kemudian valuenya seperti penggunaan css.
                    untuk mencari sesuatu yang spesifik cara 2 -> By.XPATH , cari terlebih dahulu tag elemen yang kita inginkan kemudian klik kanan copy XPATH
                    
                    variabel.text -> untuk mengeluarkan value dari tag tersebut 
                    variabel.size -> memberi tahu ukuran tag elemen tersebut.
                    variabel.screenshot(filename = "") -> untuk mengambil gambar dari tag elemen tersebut pada tampilan web
                    variabel.click() -> memungkinkan kita untuk mengclick tag elemen yang dimaksud
                    variabel.send_keys("input") -> memungkinkan kita untuk memasukkan kedalam <input> elemen

                    Keys (from selenium.webdriver.common.keys import Keys)
                    variabel.send_keys(Keys.namakey) -> namakey dapat berupa (ENTER, ARROWUP, SHIFT, dll) dan nanti akan dieksekusi

                kita juga dapat mengetahui atribut lainnya yang terkandung dalam suatu tag html
                variabel.get_attribute("atribut")
                    misalkan terdapat tag element sebagai berikut
                    <div class="price" data-testid="lblPDPDetailProductPrice">Rp21.687.000</div>
                    dengan memasukkan data-testid kedalam 'atribut' kita bisa mengetahui valuenya.

                selain itu fitur lainnya adalah kita dapat mengetahui apa jenis tag elemen yang terkandung
                varibel.tag_name
                    jika menggunakan contoh yang sama seperti diatas maka outputnya adalah string 'div'.
    import Flask (Framework untuk back-end)
        Framework ini rada ribet, kita harus bikin venv atau virtual environment (?) trus install flasknya dienvironment itu
        setelah itu baru kita bisa 'run' kode dibawah ini, cara runnya dijelaskan dibawah.
            from flask import Flask

            app = Flask(__name__)

            @app.route("/") # ini adalah python decorator yang menunjukkan routenya dan function apa yang keluar ketika user mengunjungi sites tersebut.
            def hello_world():
                return "<p>Hello, World!</p>"

        apabila diterminal sudah depannya terdapat (.venv) baru kita bisa set FLASK_APP=namafile.py
        terus baru flask --app namafile run

        logikanya rada beda dengan library biasanya, contoh dalam kode request.get("https://google.com/")
        disini kita meminta dari library requests untuk meminta ke https yang kita berikan, namun kalau framework lebih kepada 
        kita menyiapkan kode kemudian framework tersebut yang 'memanggil' kita.

            if __name__ == "__main__":
                app.run()
        ini akan mempermudah kita tanpa harus menulis "flask run" diterminal dan membuat FLASK_APP sebagai environment variable.
        karena baris kode ini memberi tahu bahwa program yang dijalankan berasal dari modul ini di dalam file ini.
        
        kita bisa merubah route (python decorator) dari suatu function dan memasukkan variable kedalamnya
        @app.route("/username/<name>") # dengan menggunakan <> 
        def greet(name):
            return f"Hello {name}!"
        sehingga apapun yang dimasukkan setelah tanda kurung name (https://127.0.0.1:5000/username/karl) akan menjadi variable bagi fungsi tersebut.
        
        from flask import render_template
            seperti yang kita ketahui bahwa kita bisa menggunakan apapun tag elemen kedalam return suatu fungsi yang didekorasi untuk memunculkannya pada tampilan website kita,
            namun selain itu kita juga bisa memberikan file html sebagai return alih2 memberikan tag html kedalam return. Hal yang perlu disiapkan adalah satu folder beri nama "templates" kemudian didalam folder tersebut berisi file html kita.
                from flask import Flask, render_template

                app = Flask(__name__)
                @app.route("/")
                def hello():
                    return render_template("index.html")
            dengan begini html inilah yang akan muncul di webpage.

            begitu juga dengan static file seperti css, javascript file, image dan lain lain. Untuk menggunakannya kita perlu memasukkan file tersebut
            kedalam folder bernama static.

            {{ }}
            dibawah ini adalah contoh file html dan perhatikan bagian h1nya.
                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>My Blog</title>
                </head>
                <body>
                    <h1>Hello World! {{5*6}}</h1>
                </body>
                </html>
            ketika flask berjalan dan suatu html dirender, tag seperti h1 akan dirender sebagai h1 yaitu tulisan akan tetapi jika kita memberikan {{ }}
            maka yang didalam tanda kurung tersebut akan dianggap sebagai python code.

            Cara menggunakan module python kedalam file htmlnya.
            kita perlu melakukan import pada file flasknya. sebagai contoh import random;
                from flask import Flask, render_template
                import random

                app = Flask(__name__)

                @app.route("/")
                def home():
                    random_number = random.randint(1,10) 
                    return render_template("index.html", num=random_number)

                if __name__ == "__main__":
                    app.run(debug=True)
            setelah kita memasukkan parameter "index.html" yaitu file html kita, kita juga dapat memasukkan variabel kedalamnya yang nantinya akan dilempar ke file html tersebut.
            sekarang pada file html kita, setiap kali kita menggunakan {{ num }} ini akan mengenerate angka random baru setiap kali refreshnya.